@using blazor.jwttest.Shared
@using System.Threading;
@page "/"
@inject HttpClient Http

<h1>Todo's List</h1>

@if (todos == null)
{
  <p><em>Loading list...</em></p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>#</th>
        <th>Title</th>
        <th>Done</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var todo in todos)
      {
        <tr>
          <td>@todo.Id</td>
          <td>@todo.Title</td>
          <td>@todo.Done</td>
        </tr>
      }
    </tbody>
  </table>

  <hr />
  <h1>Testing</h1>

  <button class="btn btn-primary" onclick="@clickHandler">Show</button>
  <span>Show Dlg is : <span class="text-info">@showDlg</span></span>

  <hr />

  <PopupDialog Show="@showDlg">
    <div class="alert alert-success" role="alert">
      <h4 class="alert-heading">Well done!</h4>
      <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>
      <hr>
      <p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
    </div>
  </PopupDialog>
}

@functions {

  Todo[] todos;

  private bool showDlg { get; set; } = false;
  private Timer _timer;

  protected override async Task OnInitAsync()
  {
    todos = await Http.GetJsonAsync<Todo[]>("api/todos/all");
  }

  protected void clickHandler()
  {
    showDlg = true;
    _timer = new Timer(TimerCallBack, null, 5000, Timeout.Infinite);

  }

  void TimerCallBack(object state)
  {
    showDlg = false;
    StateHasChanged();
  }

}

